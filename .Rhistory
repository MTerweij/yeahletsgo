g <- Dataset %>%
# hier relevelen wij variabel moment,
# dit kunnen wij pas doen op het moment dat het een factor is
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Voor", "During", "Na")) %>%
# Neutraal weghalen
filter(Eigen_polarity != "Neutraal") %>%
# ggplot is de functie om de plot te maken
# x = polarity, geen y variabele want dat doet geom_histogram zelf (tellen)
ggplot(aes(x = polarity, fill = moment)) +
# aantal bins = 5, je kan dit naar eigen keuze aanpassen. Default = 30
geom_histogram(bins = 5) +
# scales = free zorgt ervoor dat je de x-as en y-as
#facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
facet_wrap(Eigen_polarity ~ moment, scales = "free")
g
library(forcats)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
massage = FALSE, echo = TRUE, dpi = 180,
fig.width = 8, fig.height = 5)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read final data
dt <- fread('../../gen/analysis/temp/preclean.csv')
# Overlaid histograms
# ggplot(dt, aes(x=polarity, color=retweet)) +
# geom_histogram(fill="white", alpha=0.5, position="identity") + ggtitle('Some histogram')
# read final data
dt <- fread('../../gen/analysis/temp/preclean.csv')
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset - before event.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
During <- Voor <- fread("../../gen/data-preparation/output/dataset_during_event.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- Voor <- fread("../../gen/data-preparation/output/dataset_after_event.csv") %>% as_tibble() %>%
mutate(moment = "Na")
# Samenvoegen
# Je begint met voor
Dataset <- Voor %>%
# Bind rows is rijen toevoegen. Dit kan alleen wanneer je alle kolommen precies hetzelfde zijn, vandaar dat wij kolom
# moment hetzelfde hebben genoemd voor
bind_rows(During) %>%
bind_rows(Na) %>%
# mutate creeer je weer een eigen kolom
# case when is een if_else functie, maar dan voor meerdere condities
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positief",
polarity < 0 ~  "Negatief",
#?case_when
# Hij moet eindigen met TRUE ~waarde, is een eigenschap van case_when
TRUE ~ "Neutraal"
))
g <- Dataset %>%
# hier relevelen wij variabel moment,
# dit kunnen wij pas doen op het moment dat het een factor is
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Voor", "During", "Na")) %>%
# Neutraal weghalen
filter(Eigen_polarity != "Neutraal") %>%
# ggplot is de functie om de plot te maken
# x = polarity, geen y variabele want dat doet geom_histogram zelf (tellen)
ggplot(aes(x = polarity, fill = moment)) +
# aantal bins = 5, je kan dit naar eigen keuze aanpassen. Default = 30
geom_histogram(bins = 5) +
# scales = free zorgt ervoor dat je de x-as en y-as
#facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
facet_wrap(Eigen_polarity ~ moment, scales = "free")
# tidyquant::theme_tq()
g
# Samenvoegen
# Je begint met voor
Dataset <- Voor %>%
# Bind rows is rijen toevoegen. Dit kan alleen wanneer je alle kolommen precies hetzelfde zijn, vandaar dat wij kolom
# moment hetzelfde hebben genoemd voor
bind_rows(Voor) %>%
bind_rows(During) %>%
bind_rows(Na) %>%
# mutate creeer je weer een eigen kolom
# case when is een if_else functie, maar dan voor meerdere condities
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positief",
polarity < 0 ~  "Negatief",
#?case_when
# Hij moet eindigen met TRUE ~waarde, is een eigenschap van case_when
TRUE ~ "Neutraal"
))
# Samenvoegen
# Je begint met voor
Dataset <- Voor %>%
# Bind rows is rijen toevoegen. Dit kan alleen wanneer je alle kolommen precies hetzelfde zijn, vandaar dat wij kolom
# moment hetzelfde hebben genoemd voor
bind_rows(During) %>%
bind_rows(Na) %>%
# mutate creeer je weer een eigen kolom
# case when is een if_else functie, maar dan voor meerdere condities
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positief",
polarity < 0 ~  "Negatief",
#?case_when
# Hij moet eindigen met TRUE ~waarde, is een eigenschap van case_when
TRUE ~ "Neutraal"
))
g <- Dataset %>%
# hier relevelen wij variabel moment,
# dit kunnen wij pas doen op het moment dat het een factor is
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Voor", "During", "Na")) %>%
# Neutraal weghalen
filter(Eigen_polarity != "Neutraal") %>%
# ggplot is de functie om de plot te maken
# x = polarity, geen y variabele want dat doet geom_histogram zelf (tellen)
ggplot(aes(x = polarity, fill = moment)) +
# aantal bins = 5, je kan dit naar eigen keuze aanpassen. Default = 30
geom_histogram(bins = 5) +
# scales = free zorgt ervoor dat je de x-as en y-as
#facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
facet_wrap(Eigen_polarity ~ moment, scales = "free")
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
View(Before)
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
summary(Before)
rm(Before)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read final data
dt <- fread('../../gen/analysis/temp/preclean.csv')
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- Voor <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>%
mutate(moment = "Na")
View(Voor)
View(Voor)
View(Voor)
View(Voor)
View(Na)
View(Na)
fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>% View()
fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor") %>% View()
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor") %>% View()
rm(list = ls())
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor"
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
Voor %>% glimpse()
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>% View()
mutate(moment = "Na")
mutate(moment = "Na")
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>% Vi
mutate(moment = "Na")
rm(list = ls())
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read final data
dt <- fread('../../gen/analysis/temp/preclean.csv')
# Inladen verschillende datasets
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>%
mutate(moment = "Na")
Voor %>% glimpse()
During %>% glimpse()
View(Voor)
fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Voor")
# Wat hier fout is gegaan is dat je het databestand During inlaat maar dan weer de naam Voor geeft
# During <- Voor <- fread("path_to_bestand")
# During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
#     mutate(moment = "During")
During <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>%
mutate(moment = "Na")
Voor %>% glimpse()
During %>% glimpse()
Na %>% glimpse()
Voor <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Before")
# Wat hier fout is gegaan is dat je het databestand During inlaat maar dan weer de naam Voor geeft
# During <- Voor <- fread("path_to_bestand")
# During <- Voor <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
#     mutate(moment = "During")
During <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
Na <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>%
mutate(moment = "After")
Na %>% glimpse()
# Samenvoegen
# Je begint met voor
Dataset <- Voor %>%
# Bind rows is rijen toevoegen. Dit kan alleen wanneer je alle kolommen precies hetzelfde zijn, vandaar dat wij kolom
# moment hetzelfde hebben genoemd voor
bind_rows(During) %>%
bind_rows(Na) %>%
# mutate creeer je weer een eigen kolom
# case when is een if_else functie, maar dan voor meerdere condities
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positief",
polarity < 0 ~  "Negatief",
#?case_when
# Hij moet eindigen met TRUE ~waarde, is een eigenschap van case_when
TRUE ~ "Neutraal"
))
Dataset
Dataset %>% count(Moment)
Dataset %>% count(moment)
g <- Dataset %>%
# hier relevelen wij variabel moment,
# dit kunnen wij pas doen op het moment dat het een factor is
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Before", "During", "After")) %>%
# Neutraal weghalen
filter(Eigen_polarity != "Neutraal") %>%
# ggplot is de functie om de plot te maken
# x = polarity, geen y variabele want dat doet geom_histogram zelf (tellen)
ggplot(aes(x = polarity, fill = moment)) +
# aantal bins = 5, je kan dit naar eigen keuze aanpassen. Default = 30
geom_histogram(bins = 5) +
# scales = free zorgt ervoor dat je de x-as en y-as
#facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
facet_wrap(Eigen_polarity ~ moment, scales = "free")
g
# Samenvoegen
# Je begint met voor
Dataset <- Voor %>%
# Bind rows is rijen toevoegen. Dit kan alleen wanneer je alle kolommen precies hetzelfde zijn, vandaar dat wij kolom
# moment hetzelfde hebben genoemd voor
bind_rows(During) %>%
bind_rows(Na) %>%
# mutate creeer je weer een eigen kolom
# case when is een if_else functie, maar dan voor meerdere condities
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positive",
polarity < 0 ~  "Negative",
#?case_when
# Hij moet eindigen met TRUE ~waarde, is een eigenschap van case_when
TRUE ~ "Neutral"
))
g <- Dataset %>%
# hier relevelen wij variabel moment,
# dit kunnen wij pas doen op het moment dat het een factor is
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Before", "During", "After")) %>%
# Neutraal weghalen
filter(Eigen_polarity != "Neutraal") %>%
# ggplot is de functie om de plot te maken
# x = polarity, geen y variabele want dat doet geom_histogram zelf (tellen)
ggplot(aes(x = polarity, fill = moment)) +
# aantal bins = 5, je kan dit naar eigen keuze aanpassen. Default = 30
geom_histogram(bins = 5) +
# scales = free zorgt ervoor dat je de x-as en y-as
#facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
facet_wrap(Eigen_polarity ~ moment, scales = "free")
g
install.packages("tidyquant")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
massage = FALSE, echo = FALSE, dpi = 180,
fig.width = 8, fig.height = 5)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read full data set
dt <- fread('../../gen/analysis/temp/preclean.csv')
# read the different data sets
Before <- fread("../../gen/data-preparation/output/dataset_before.csv")
During <- fread("../../gen/data-preparation/output/dataset_during.csv")
After <- fread("../../gen/data-preparation/output/dataset_after.csv")
g <- Dataset %>%
# Over here we relevel the variable 'moment',
# this becomes possible when we made 'moment' into a factor
# str(Dataset$mutate) # factor
# fct_relevel = factor_relevel
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Before", "During", "After")) %>%
# Remove Neutral plot
filter(Eigen_polarity != "Neutral") %>%
# ggplot is the functie to make a plot
# x = polarity, no y variables because geom_histogram does this itself (counts rows)
ggplot(aes(x = polarity, fill = moment)) +
# number of bins = 5, eventually adjust. Default = 30
geom_histogram(bins = 10) +
# scales = free makes sure the x-as en y-as are scaled freely
# free_x scales all y-as equal
facet_wrap(Eigen_polarity ~ moment, scales = "free_x")
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
message = FALSE, echo = TRUE, dpi = 180,
fig.width = 8, fig.height = 5)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read full data set
dt <- fread('../../gen/analysis/temp/preclean.csv')
# read the different data sets
Before <- fread("../../gen/data-preparation/output/dataset_before.csv")
During <- fread("../../gen/data-preparation/output/dataset_during.csv")
After <- fread("../../gen/data-preparation/output/dataset_after.csv")
Dataset
Before %>%
# 'Bind rows' to add rows. Only possible when all columns are equal, therefore, we called every column 'moment'
bind_rows(During) %>%
bind_rows(After) %>%
# 'mutate' creates another new column
# 'case when' is a if_else function, but for multiple conditions
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positive",
polarity < 0 ~  "Negative",
#?case_when
# Should end with TRUE ~value, this is a function of 'case_when'
TRUE ~ "Neutral"
))
Dataset <- Before %>%
# 'Bind rows' to add rows. Only possible when all columns are equal, therefore, we called every column 'moment'
bind_rows(During) %>%
bind_rows(After) %>%
# 'mutate' creates another new column
# 'case when' is a if_else function, but for multiple conditions
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positive",
polarity < 0 ~  "Negative",
#?case_when
# Should end with TRUE ~value, this is a function of 'case_when'
TRUE ~ "Neutral"
))
rm(list = ls())
fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Before")
fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Before") %>% glimpse()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE,
message = FALSE, echo = TRUE, dpi = 180,
fig.width = 8, fig.height = 5)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
# read full data set
dt <- fread('../../gen/analysis/temp/preclean.csv')
# read the different data sets
# Before <- fread("../../gen/data-preparation/output/dataset_before.csv")
#
# During <- fread("../../gen/data-preparation/output/dataset_during.csv")
#
# After <- fread("../../gen/data-preparation/output/dataset_after.csv")
dt <- fread('../../gen/analysis/temp/preclean.csv')
# load the different data sets
Before <- fread("../../gen/data-preparation/output/dataset_before.csv") %>% as_tibble() %>%
# met mutate voeg je een kolom toe, waarde voor kolom moment = voor
mutate(moment = "Before")
During <- fread("../../gen/data-preparation/output/dataset_during.csv") %>% as_tibble() %>%
mutate(moment = "During")
After <- fread("../../gen/data-preparation/output/dataset_after.csv") %>% as_tibble() %>%
mutate(moment = "After")
Dataset
Dataset <- Before %>%
# 'Bind rows' to add rows. Only possible when all columns are equal, therefore, we called every column 'moment'
bind_rows(During) %>%
bind_rows(After) %>%
# 'mutate' creates another new column
# 'case when' is a if_else function, but for multiple conditions
mutate(Eigen_polarity = case_when(
polarity > 0 ~   "Positive",
polarity < 0 ~  "Negative",
#?case_when
# Should end with TRUE ~value, this is a function of 'case_when'
TRUE ~ "Neutral"
))
Dataset
Dataset %>% glimpse()
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity)
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n))
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n),
pct = scales::percenT(pct))
install.packages("scales")
install.packages("scales")
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n),
pct = scales::percenT(pct))
library(tidyverse)
library(data.table)
library(ggplot2)
library(tidyverse)
library(forcats)
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n),
pct = scales::percenT(pct))
Dataset %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n),
pct = scales::percent(pct))
Dataset %>%
mutate(moment = moment %>% as_factor(),
moment = moment %>% fct_relevel("Before", "During", "After")) %>%
group_by(moment) %>%
count(Eigen_polarity) %>%
mutate(pct = n / sum(n),
pct = scales::percent(pct))
install.packages("DT")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
library(data.table)
dt <- fread('../../gen/data-preparation/output/dataset.csv')
dir.create('../../gen/analysis/temp/', recursive = TRUE)
dir.create('../../gen/analysis/output/', recursive = TRUE)
fwrite(dt, '../../gen/analysis/temp/preclean.csv')
Before <- fread('../../gen/data-preparation/output/dataset_before.csv')
dir.create('../../gen/analysis/temp/', recursive = TRUE)
dir.create('../../gen/analysis/output/', recursive = TRUE)
fwrite(Before, '../../gen/analysis/temp/preclean-before.csv')
During <- fread('../../gen/data-preparation/output/dataset_during.csv')
dir.create('../../gen/analysis/temp/', recursive = TRUE)
dir.create('../../gen/analysis/output/', recursive = TRUE)
fwrite(During, '../../gen/analysis/temp/preclean-during.csv')
After <- fread('../../gen/data-preparation/output/dataset_after.csv')
dir.create('../../gen/analysis/temp/', recursive = TRUE)
dir.create('../../gen/analysis/output/', recursive = TRUE)
fwrite(After, '../../gen/analysis/temp/preclean-after.csv')
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
setwd("~/RISM TA2/FUCKING YES LETS GO/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
setwd("~/RISM TA2/FUCKING YES LETS GO/src/analysis")
setwd("~/RISM TA2/textmining-workflow-master/src/analysis")
setwd("~/RISM TA2/FUCKING YES LETS GO/src/analysis")
source('~/RISM TA2/textmining-workflow-master/src/analysis/preclean.R')
```{r setup, include=FALSE}
setwd("~/RISM TA2/FUCKING YES LETS GO/src/analysis")
